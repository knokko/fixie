// Generated by fixie at 07-03-2024 07:53
package fixie

import java.math.BigInteger
private const val RAW_ONE = 16777216u

@JvmInline
value class FixAngle private constructor(val raw: UInt) : Comparable<FixAngle> {

	override fun toString(): String {
		val intPart = raw / RAW_ONE
		val bigFract = BigInteger.valueOf((raw % RAW_ONE).toLong()) * BigInteger.valueOf(10000000)
		val results = bigFract.divideAndRemainder(BigInteger.valueOf(RAW_ONE.toLong()))
		var fractNumber = results[0]
		if (results[1] >= BigInteger.valueOf(8388608)) fractNumber += BigInteger.ONE
		var fractPart = fractNumber.toString().replace("-", "")
		while (fractPart.length < 7) fractPart = "0$fractPart"
		fractPart = ".$fractPart"
		while (fractPart.endsWith('0')) fractPart = fractPart.substring(0 until fractPart.length - 1)
		if (fractPart == ".") fractPart = ""
		return "$intPart$fractPart"
	}

	fun toInt() = (raw / RAW_ONE).toInt()

	fun toLong() = (raw / RAW_ONE).toLong()

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	operator fun plus(right: FixAngle) = FixAngle(this.raw + right.raw)

	operator fun plus(right: Int) = this + from(right)

	operator fun plus(right: Long) = this + from(right)

	operator fun plus(right: Float) = this + from(right)

	operator fun plus(right: Double) = this + from(right)

	operator fun minus(right: FixAngle) = FixAngle(this.raw - right.raw)

	operator fun minus(right: Int) = this - from(right)

	operator fun minus(right: Long) = this - from(right)

	operator fun minus(right: Float) = this - from(right)

	operator fun minus(right: Double) = this - from(right)

	operator fun times(right: FixAngle): FixAngle {
		val largeValue = this.raw.toULong() * right.raw.toULong()
		return FixAngle((largeValue shr 24).toUInt())
	}

	operator fun times(right: Int) = FixAngle(raw * right.toUInt())

	operator fun times(right: Long) = FixAngle((raw * right.toULong()).toUInt())

	operator fun times(right: Float) = this * from(right)

	operator fun times(right: Double) = this * from(right)

	operator fun div(right: FixAngle): FixAngle {
		val largeValue = this.raw.toULong() shl 24
		return FixAngle((largeValue / right.raw).toUInt())
	}

	operator fun div(right: Int) = FixAngle(raw / right.toUInt())

	operator fun div(right: Long) = FixAngle((raw / right.toULong()).toUInt())

	operator fun div(right: Float) = this / from(right)

	operator fun div(right: Double) = this / from(right)

	override operator fun compareTo(other: FixAngle) = this.raw.compareTo(other.raw)

	operator fun compareTo(other: Int) = if (other < 0) 1 else if (other > 255) -1 else this.compareTo(from(other))

	operator fun compareTo(other: UInt) = if (other > 255u) -1 else this.compareTo(from(other))

	operator fun compareTo(other: Long) = if (other < 0) 1 else if (other > 255) -1 else this.compareTo(from(other))

	operator fun compareTo(other: ULong) = if (other > 255u) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Float) = if (other < 0.0f) 1 else if (other > 256.0f) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Double) = if (other < 0.0) 1 else if (other > 255.99999994039536) -1 else this.compareTo(from(other))

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: UInt) = FixAngle(rawValue)

		fun from(value: Int) = FixAngle(value.toUInt() * RAW_ONE)

		fun from(value: Long) = from(value.toInt())

		fun from(value: UInt) = FixAngle(value * RAW_ONE)

		fun from(value: ULong) = from(value.toUInt())

		fun from(value: Float) = from(value.toDouble())

		fun from(value: Double) = FixAngle(kotlin.math.floor(RAW_ONE.toDouble() * value + 0.5).toUInt())
	}

	@JvmInline
	@OptIn(ExperimentalUnsignedTypes::class)
	value class Array private constructor(val raw: UIntArray) {

		constructor(size: Int) : this(UIntArray(size))

		constructor(size: Int, initializer: (Int) -> FixAngle) : this(UIntArray(size) { index -> initializer(index).raw })

		val size: Int
			get() = raw.size

		operator fun get(index: Int) = FixAngle(raw[index])

		operator fun set(index: Int, value: FixAngle) {
			raw[index] = value.raw
		}

		fun fill(value: FixAngle) {
			raw.fill(value.raw)
		}
	}
}

operator fun Int.plus(right: FixAngle) = FixAngle.from(this) + right

operator fun Long.plus(right: FixAngle) = FixAngle.from(this) + right

operator fun Float.plus(right: FixAngle) = FixAngle.from(this) + right

operator fun Double.plus(right: FixAngle) = FixAngle.from(this) + right

operator fun Int.minus(right: FixAngle) = FixAngle.from(this) - right

operator fun Long.minus(right: FixAngle) = FixAngle.from(this) - right

operator fun Float.minus(right: FixAngle) = FixAngle.from(this) - right

operator fun Double.minus(right: FixAngle) = FixAngle.from(this) - right

operator fun Int.times(right: FixAngle) = right * this

operator fun Long.times(right: FixAngle) = right * this

operator fun Float.times(right: FixAngle) = right * this

operator fun Double.times(right: FixAngle) = right * this

operator fun Int.div(right: FixAngle) = FixAngle.from(this) / right

operator fun Long.div(right: FixAngle) = FixAngle.from(this) / right

operator fun Float.div(right: FixAngle) = FixAngle.from(this) / right

operator fun Double.div(right: FixAngle) = FixAngle.from(this) / right

operator fun Int.compareTo(right: FixAngle) = FixAngle.from(this).compareTo(right)

operator fun Long.compareTo(right: FixAngle) = FixAngle.from(this).compareTo(right)

operator fun Float.compareTo(right: FixAngle) = FixAngle.from(this).compareTo(right)

operator fun Double.compareTo(right: FixAngle) = FixAngle.from(this).compareTo(right)

fun min(a: FixAngle, b: FixAngle) = FixAngle.raw(kotlin.math.min(a.raw, b.raw))

fun max(a: FixAngle, b: FixAngle) = FixAngle.raw(kotlin.math.max(a.raw, b.raw))
