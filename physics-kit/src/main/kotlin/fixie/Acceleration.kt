// Generated by fixie at 19-07-2024 08:47
package fixie

import kotlin.math.min
import kotlin.math.max
import kotlin.math.abs
import kotlin.time.Duration
import kotlin.time.DurationUnit

@JvmInline
value class Acceleration internal constructor(val value: Float) : Comparable<Acceleration> {

	/** Gets the acceleration value, in m/s^2 */
	fun toDouble() = value.toDouble()

	override fun toString() = String.format("%.2f%s", value, "m/s^2")

	override operator fun compareTo(other: Acceleration) = this.value.compareTo(other.value)

	operator fun unaryMinus() = Acceleration(-value)

	operator fun plus(right: Acceleration) = Acceleration(this.value + right.value)

	operator fun minus(right: Acceleration) = Acceleration(this.value - right.value)

	operator fun div(right: Acceleration) = this.value / right.value

	operator fun times(right: Int) = Acceleration(this.value * right)

	operator fun div(right: Int) = Acceleration(this.value / right)

	operator fun times(right: Long) = Acceleration(this.value * right)

	operator fun div(right: Long) = Acceleration(this.value / right)

	operator fun times(right: Float) = Acceleration(this.value * right)

	operator fun div(right: Float) = Acceleration(this.value / right)

	operator fun times(right: Double) = Acceleration(this.value * right.toFloat())

	operator fun div(right: Double) = Acceleration(this.value / right.toFloat())

	operator fun times(right: Duration) = value * Speed.METERS_PER_SECOND * right.toDouble(DurationUnit.SECONDS)

	companion object {

		val MPS2 = Acceleration(1f)
	}
}

operator fun Int.times(right: Acceleration) = right * this

val Int.mps2
	get() = Acceleration.MPS2 * this

operator fun Long.times(right: Acceleration) = right * this

val Long.mps2
	get() = Acceleration.MPS2 * this

operator fun Float.times(right: Acceleration) = right * this

val Float.mps2
	get() = Acceleration.MPS2 * this

operator fun Double.times(right: Acceleration) = right * this

val Double.mps2
	get() = Acceleration.MPS2 * this

fun abs(x: Acceleration) = Acceleration(abs(x.value))

fun min(a: Acceleration, b: Acceleration) = Acceleration(min(a.value, b.value))

fun max(a: Acceleration, b: Acceleration) = Acceleration(max(a.value, b.value))
