// Generated by fixie at 28-01-2024 22:31
package fixie

import java.math.BigInteger
import java.lang.Math.*

private const val RAW_ONE = 1048576L

@JvmInline
value class FixMicro64 private constructor(val raw: Long) : Comparable<FixMicro64> {

	override fun toString(): String {
		val intPart = raw / RAW_ONE
		val bigFract = BigInteger.valueOf((raw % RAW_ONE)) * BigInteger.valueOf(1000000)
		val results = bigFract.divideAndRemainder(BigInteger.valueOf(RAW_ONE))
		var fractNumber = results[0]
		if (results[1] >= BigInteger.valueOf(524288)) fractNumber += BigInteger.ONE
		var fractPart = "." + fractNumber.toString().replace("-", "")
		while (fractPart.endsWith('0')) fractPart = fractPart.substring(0 until fractPart.length - 1)
		if (fractPart == ".") fractPart = ""
		val minus = if (raw < 0L && intPart == 0L) "-" else ""
		return "$minus$intPart$fractPart"
	}

	@Throws(FixedPointException::class)
	fun toInt(): Int {
		val uncheckedResult = raw / RAW_ONE
		if (uncheckedResult < Int.MIN_VALUE) throw FixedPointException("$uncheckedResult to too small")
		if (uncheckedResult > Int.MAX_VALUE) throw FixedPointException("$uncheckedResult to too large")
		return uncheckedResult.toInt()
	}

	fun toLong() = raw / RAW_ONE

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	@Throws(FixedPointException::class)
	operator fun unaryMinus() = if (raw != Long.MIN_VALUE)
		FixMicro64(-raw) else throw FixedPointException("Can't negate MIN_VALUE")

	@Throws(FixedPointException::class)
	operator fun plus(right: FixMicro64): FixMicro64 {
		try {
			return FixMicro64(addExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this + $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun plus(right: Int) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Long) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Float) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Double) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: FixMicro64): FixMicro64 {
		try {
			return FixMicro64(subtractExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this - $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun minus(right: Int) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Long) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Float) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Double) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: FixMicro64): FixMicro64 {
		val highProductBits = multiplyHigh(this.raw, right.raw)
		val lowProductBits = this.raw * right.raw
		if (highProductBits < -(1 shl 19) || highProductBits >= (1 shl 19)) {
			throw FixedPointException("Can't represent $this * $right")
		}
		return FixMicro64((lowProductBits ushr 20) or (highProductBits shl 44))
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Int): FixMicro64 {
		try {
			return FixMicro64(multiplyExact(raw, right))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Can't represent $this * $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Long): FixMicro64 {
		try {
			return FixMicro64(multiplyExact(raw, right))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Can't represent $this * $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Float) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Double) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: FixMicro64): FixMicro64 {
		val highProductBits = this.raw shr 44
		val lowProductBits = this.raw shl 20
		return if ((highProductBits == 0L && this.raw >= 0 && lowProductBits >= 0) || (highProductBits == -1L && this.raw < 0 && lowProductBits < 0)) {
			FixMicro64(lowProductBits / right.raw)
		} else {
			val result = (BigInteger.valueOf(this.raw) * BigInteger.valueOf(RAW_ONE)) / BigInteger.valueOf(right.raw)
			try {
				FixMicro64(result.longValueExact())
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't compute $this / $right")
			}
		}
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Int): FixMicro64 {
		if (right == 0 || (raw == Long.MIN_VALUE && right == -1)) {
			throw FixedPointException("Can't represent $this / $right")
		}
		return FixMicro64(raw / right)
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Long): FixMicro64 {
		if (right == 0L || (raw == Long.MIN_VALUE && right == -1L)) {
			throw FixedPointException("Can't represent $this / $right")
		}
		return FixMicro64(raw / right)
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Float) = this / from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: Double) = this / from(right)

	override operator fun compareTo(other: FixMicro64) = this.raw.compareTo(other.raw)

	operator fun compareTo(other: Int) = this.compareTo(from(other))

	operator fun compareTo(other: Long) = if (other < -8796093022208) 1 else if (other > 8796093022207) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Float) = if (other < -8.796093E12f) 1 else if (other > 8.796093E12f) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Double) = if (other < -8.796093022208E12) 1 else if (other > 8.796093022208E12) -1 else this.compareTo(from(other))

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: Long) = FixMicro64(rawValue)

		fun from(value: Int) = FixMicro64(value.toLong() * RAW_ONE)

		@Throws(FixedPointException::class)
		fun from(value: Long): FixMicro64 {
			try {
				return FixMicro64(multiplyExact(value, RAW_ONE))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't represent $value")
			}
		}

		fun from(value: Float) = from(value.toDouble())

		@Throws(FixedPointException::class)
		fun from(value: Double): FixMicro64 {
			val doubleValue = RAW_ONE.toDouble() * value
			if (doubleValue > Long.MAX_VALUE.toDouble() || doubleValue < Long.MIN_VALUE.toDouble()) {
				throw FixedPointException("Can't represent $value")
			}
			return FixMicro64(round(doubleValue))
		}
	}

	@JvmInline
	value class Array private constructor(val raw: LongArray) {

		constructor(size: Int) : this(LongArray(size))

		constructor(size: Int, initializer: (Int) -> FixMicro64) : this(LongArray(size) { index -> initializer(index).raw })

		val size: Int
			get() = raw.size

		operator fun get(index: Int) = FixMicro64(raw[index])

		operator fun set(index: Int, value: FixMicro64) {
			raw[index] = value.raw
		}

		fun fill(value: FixMicro64) {
			raw.fill(value.raw)
		}
	}
}

@Throws(FixedPointException::class)
operator fun Int.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Long.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Float.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Double.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Int.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Long.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Float.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Double.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Int.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Long.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Float.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Double.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Int.div(right: FixMicro64) = FixMicro64.from(this) / right

@Throws(FixedPointException::class)
operator fun Long.div(right: FixMicro64) = FixMicro64.from(this) / right

@Throws(FixedPointException::class)
operator fun Float.div(right: FixMicro64) = FixMicro64.from(this) / right

@Throws(FixedPointException::class)
operator fun Double.div(right: FixMicro64) = FixMicro64.from(this) / right

operator fun Int.compareTo(right: FixMicro64) = FixMicro64.from(this).compareTo(right)

operator fun Long.compareTo(right: FixMicro64) = FixMicro64.from(this).compareTo(right)

operator fun Float.compareTo(right: FixMicro64) = FixMicro64.from(this).compareTo(right)

operator fun Double.compareTo(right: FixMicro64) = FixMicro64.from(this).compareTo(right)

@Throws(FixedPointException::class)
fun abs(value: FixMicro64) = if (value.raw != Long.MIN_VALUE) FixMicro64.raw(kotlin.math.abs(value.raw))
		else throw FixedPointException("Can't represent abs of min value")

fun min(a: FixMicro64, b: FixMicro64) = FixMicro64.raw(kotlin.math.min(a.raw, b.raw))

fun max(a: FixMicro64, b: FixMicro64) = FixMicro64.raw(kotlin.math.max(a.raw, b.raw))
