// Generated by fixie at 01-02-2024 23:28
package fixie

import kotlin.math.sqrt

@JvmInline
value class Displacement internal constructor(internal val value: FixDisplacement) : Comparable<Displacement> {

	fun toDouble(unit: DistanceUnit) = when(unit) {
		DistanceUnit.PICOMETER -> value.toDouble() * 1.0E12
		DistanceUnit.NANOMETER -> value.toDouble() * 1.0E9
		DistanceUnit.MICROMETER -> value.toDouble() * 1000000.0
		DistanceUnit.MILLIMETER -> value.toDouble() * 1000.0
		DistanceUnit.INCH -> value.toDouble() * 39.37007874015748
		DistanceUnit.FOOT -> value.toDouble() * 3.280839895013123
		DistanceUnit.YARD -> value.toDouble() * 1.0936132983377076
		DistanceUnit.METER -> value.toDouble()
		DistanceUnit.KILOMETER -> value.toDouble() * 0.001
		DistanceUnit.MILE -> value.toDouble() * 6.213711922373339E-4
	}

	override fun toString() = toString(DistanceUnit.METER)

	fun toString(unit: DistanceUnit) = toDouble(unit).toString() + unit.abbreviation

	@Throws(FixedPointException::class)
	override operator fun compareTo(other: Displacement) = this.value.compareTo(other.value)

	@Throws(FixedPointException::class)
	operator fun unaryMinus() = Displacement(-value)

	@Throws(FixedPointException::class)
	operator fun plus(right: Displacement) = Displacement(this.value + right.value)

	@Throws(FixedPointException::class)
	operator fun minus(right: Displacement) = Displacement(this.value - right.value)

	@Throws(FixedPointException::class)
	operator fun times(right: Int) = Displacement(this.value * right)

	@Throws(FixedPointException::class)
	operator fun div(right: Int) = Displacement(this.value / right)

	@Throws(FixedPointException::class)
	operator fun times(right: Long) = Displacement(this.value * right)

	@Throws(FixedPointException::class)
	operator fun div(right: Long) = Displacement(this.value / right)

	@Throws(FixedPointException::class)
	operator fun times(right: Float) = Displacement(this.value * right)

	@Throws(FixedPointException::class)
	operator fun div(right: Float) = Displacement(this.value / right)

	@Throws(FixedPointException::class)
	operator fun times(right: Double) = Displacement(this.value * right)

	@Throws(FixedPointException::class)
	operator fun div(right: Double) = Displacement(this.value / right)

	@Throws(FixedPointException::class)
	operator fun times(right: FixDisplacement) = Displacement(this.value * right)

	@Throws(FixedPointException::class)
	operator fun div(right: FixDisplacement) = Displacement(this.value / right)

	@Throws(FixedPointException::class)
	operator fun times(right: Displacement) = Area(this.value.toDouble() * right.value.toDouble())

	@Throws(FixedPointException::class)
	operator fun div(right: Displacement) = this.value / right.value

	companion object {

		fun raw(value: Int) = Displacement(FixDisplacement.raw(value))

		val METER = Displacement(FixDisplacement.ONE)

		val KILOMETER = METER * 1000

		val MILLIMETER = METER / 1000
	}
	@JvmInline
	value class Area(val raw: Double) {

		operator fun plus(right: Area) = Area(this.raw + right.raw)

		operator fun minus(right: Area) = Area(this.raw - right.raw)

		operator fun div(right: Area) = FixDisplacement.from(this.raw / right.raw)
	}
}

@Throws(FixedPointException::class)
operator fun Int.times(right: Displacement) = right * this

val Int.m
	get() = Displacement.METER * this

val Int.km
	get() = Displacement.KILOMETER * this

val Int.mm
	get() = Displacement.MILLIMETER * this

@Throws(FixedPointException::class)
operator fun Long.times(right: Displacement) = right * this

val Long.m
	get() = Displacement.METER * this

val Long.km
	get() = Displacement.KILOMETER * this

val Long.mm
	get() = Displacement.MILLIMETER * this

@Throws(FixedPointException::class)
operator fun Float.times(right: Displacement) = right * this

val Float.m
	get() = Displacement.METER * this

val Float.km
	get() = Displacement.KILOMETER * this

val Float.mm
	get() = Displacement.MILLIMETER * this

@Throws(FixedPointException::class)
operator fun Double.times(right: Displacement) = right * this

val Double.m
	get() = Displacement.METER * this

val Double.km
	get() = Displacement.KILOMETER * this

val Double.mm
	get() = Displacement.MILLIMETER * this

@Throws(FixedPointException::class)
operator fun FixDisplacement.times(right: Displacement) = right * this

val FixDisplacement.m
	get() = Displacement.METER * this

val FixDisplacement.km
	get() = Displacement.KILOMETER * this

val FixDisplacement.mm
	get() = Displacement.MILLIMETER * this

@Throws(FixedPointException::class)
fun sqrt(area: Displacement.Area) = sqrt(area.raw) * Displacement.METER

fun min(a: Displacement, b: Displacement) = Displacement(min(a.value, b.value))

fun max(a: Displacement, b: Displacement) = Displacement(max(a.value, b.value))
