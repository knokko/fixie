package fixie.generator.acceleration

import fixie.generator.number.FloatType
import java.io.PrintWriter
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

internal class AccelerationClassGenerator(
        private val writer: PrintWriter,
        private val acceleration: AccelerationClass,
        private val packageName: String
) {

    fun generate() {
        generateClassPrefix()
        generateToDouble()
        generateToString()
        generateArithmetic()
        generateCompanionObject()
        writer.println("}")
        generateExtensionFunctions()
        generateMathFunctions()
    }

    private fun generateClassPrefix() {
        val currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"))
        writer.println("// Generated by fixie at $currentTime")
        writer.println("package $packageName")
        writer.println()
        for (functionName in arrayOf("abs", "max", "min")) writer.println("import kotlin.math.$functionName")
        writer.println("import kotlin.time.Duration")
        writer.println("import kotlin.time.DurationUnit")
        writer.println()
        writer.println("@JvmInline")
        writer.println("value class ${acceleration.className} internal constructor(val value: ${acceleration.floatType.typeName}) " +
                ": Comparable<${acceleration.className}> {")
    }

    private fun generateToDouble() {
        writer.println()
        writer.println("\t/** Gets the acceleration value, in m/s^2 */")
        val conversion = if (acceleration.floatType.numBytes == 4) ".toDouble()" else ""
        writer.println("\tfun toDouble() = value$conversion")
    }

    private fun generateToString() {
        writer.println()
        writer.println("\toverride fun toString() = String.format(\"%.2f%s\", value, \"m/s^2\")")
    }

    private fun generateArithmetic() {
        writer.println()
        writer.println("\toverride operator fun compareTo(other: ${acceleration.className}) = this.value.compareTo(other.value)")

        writer.println()
        writer.println("\toperator fun unaryMinus() = ${acceleration.className}(-value)")

        writer.println()
        writer.println("\toperator fun plus(right: ${acceleration.className}) = ${acceleration.className}(this.value + right.value)")
        writer.println()
        writer.println("\toperator fun minus(right: ${acceleration.className}) = ${acceleration.className}(this.value - right.value)")

        for (typeName in arrayOf("Int", "Long", "Float", "Double")) {
            val rightSuffix = if (typeName == "Double" && acceleration.floatType == FloatType.SinglePrecision) ".toFloat()" else ""
            writer.println()
            writer.println("\toperator fun times(right: $typeName) = ${acceleration.className}(this.value * right$rightSuffix)")
            writer.println()
            writer.println("\toperator fun div(right: $typeName) = ${acceleration.className}(this.value / right$rightSuffix)")
        }

        if (acceleration.speedClassName != null) {
            writer.println()
            writer.println("\toperator fun times(right: Duration) = value * ${acceleration.speedClassName}.METERS_PER_SECOND * right.toDouble(DurationUnit.SECONDS)")
        }
        writer.println()
        writer.println("\toperator fun div(right: ${acceleration.className}) = this.value / right.value")
    }

    private fun generateCompanionObject() {
        writer.println()
        writer.println("\tcompanion object {")
        val suffix = if (acceleration.floatType.numBytes == 4) "f" else ".0"
        writer.println("\t\tval MPS2 = ${acceleration.className}(1$suffix)")
        writer.println("\t}")
    }

    private fun generateExtensionFunctions() {
        for (typeName in arrayOf("Int", "Long", "Float", "Double")) {
            writer.println()
            writer.println("operator fun $typeName.times(right: ${acceleration.className}) = right * this")

            if (acceleration.createNumberExtensions) {
                writer.println()
                writer.println("val $typeName.mps2")
                writer.println("\tget() = ${acceleration.className}.MPS2 * this")
            }
        }
    }

    private fun generateMathFunctions() {
        writer.println()
        writer.println("fun abs(x: ${acceleration.className}) = ${acceleration.className}(abs(x.value))")
        writer.println()
        writer.println("fun min(a: ${acceleration.className}, b: ${acceleration.className}) = ${acceleration.className}(min(a.value, b.value))")
        writer.println()
        writer.println("fun max(a: ${acceleration.className}, b: ${acceleration.className}) = ${acceleration.className}(max(a.value, b.value))")
    }
}
