package fixie.generator.speed

import fixie.SpeedUnit
import java.io.PrintWriter
import java.math.BigDecimal
import java.math.BigInteger
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

class SpeedClassGenerator(
    private val writer: PrintWriter,
    private val speed: SpeedClass
) {

    private var unitConstants = mutableListOf(speed.oneUnit)

    fun generate() {
        generateClassPrefix()
        generateToDouble()
        generateToString()
        generateArithmetic()
        generateCompanionObject()
        writer.println("}")
        generateExtensionFunctions()
        generateMathFunctions()
    }

    private fun generateClassPrefix() {
        val currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"))
        writer.println("// Generated by fixie at $currentTime")
        writer.println("package fixie")
        writer.println()
        writer.println("import java.text.DecimalFormat")
        writer.println("import java.util.Locale")
        writer.println("import kotlin.time.Duration")
        writer.println("import kotlin.time.DurationUnit")
        writer.println()
        writer.println("@JvmInline")
        writer.println("value class ${speed.className} internal constructor(val value: ${speed.number.className}) " +
                ": Comparable<${speed.className}> {")
    }

    private fun generateToDouble() {
        writer.println()
        writer.println("\tfun toDouble(unit: SpeedUnit) = when(unit) {")
        for (unit in SpeedUnit.entries) {
            val factor = unit.factor / speed.oneUnit.factor
            val conversion = if (factor == 1.0) "" else " * $factor"
            writer.println("\t\tSpeedUnit.$unit -> value.toDouble()$conversion")
        }
        writer.println("\t}")
    }

    private fun generateToString() {
        writer.println()
        writer.println("\toverride fun toString() = toString(SpeedUnit.${speed.displayUnit})")
        writer.println()
        writer.println("\tfun toString(unit: SpeedUnit): String {")
        writer.println("\t\tval format = DecimalFormat.getInstance(Locale.ROOT)")
        writer.println("\t\tformat.maximumFractionDigits = 4")
        writer.println("\t\treturn format.format(toDouble(unit)) + unit.abbreviation")
        writer.println("\t}")
    }

    private fun generateArithmetic() {
        fun next() {
            writer.println()
            if (speed.number.checkOverflow) writer.println("\t@Throws(FixedPointException::class)")
        }

        next()
        writer.println("\toverride operator fun compareTo(other: ${speed.className}) = this.value.compareTo(other.value)")
        next()

        if (speed.number.internalType.signed) {
            writer.println("\toperator fun unaryMinus() = ${speed.className}(-value)")
            next()
        }

        writer.println("\toperator fun plus(right: ${speed.className}) = ${speed.className}(this.value + right.value)")
        next()
        writer.println("\toperator fun minus(right: ${speed.className}) = ${speed.className}(this.value - right.value)")

        for (typeName in arrayOf("Int", "Long", "Float", "Double", speed.number.className)) {
            next()
            writer.println("\toperator fun times(right: $typeName) = ${speed.className}(this.value * right)")
            next()
            writer.println("\toperator fun div(right: $typeName) = ${speed.className}(this.value / right)")
        }

        next()
        writer.println("\toperator fun times(right: Duration) = (toDouble(SpeedUnit.METERS_PER_SECOND) * right.toDouble(DurationUnit.SECONDS).m)")
        next()
        writer.println("\toperator fun div(right: ${speed.className}) = this.value / right.value")
    }

    private fun generateCompanionObject() {
        writer.println()
        writer.println("\tcompanion object {")
        writer.println()
        writer.println("\t\tfun raw(value: ${speed.number.internalType}) = ${speed.className}(${speed.number.className}.raw(value))")
        writer.println()
        writer.println("\t\tval ${speed.oneUnit} = ${speed.className}(${speed.number.className}.ONE)")

        for (unit in SpeedUnit.entries) {
            if (unit != speed.oneUnit) {
                val factor = speed.oneUnit.factor / unit.factor
                val rawValue = BigDecimal.valueOf(speed.number.oneValue.toDouble()) * BigDecimal.valueOf(factor)
                if (speed.number.internalType.canRepresent(rawValue.toBigInteger() + BigInteger.TWO)) {
                    writer.println()
                    writer.println("\t\tval $unit = ${speed.oneUnit} * $factor")
                    unitConstants.add(unit)
                }
            }
        }

        writer.println("\t}")
    }

    private fun generateExtensionFunctions() {
        for (typeName in arrayOf("Int", "Long", "Float", "Double", speed.number.className)) {
            writer.println()
            if (speed.number.checkOverflow) writer.println("@Throws(FixedPointException::class)")
            writer.println("operator fun $typeName.times(right: ${speed.className}) = right * this")

            if (speed.createNumberExtensions) {
                for (unit in unitConstants) {
                    writer.println()
                    writer.println("val $typeName.${unit.abbreviation.replace('/', 'p')}")
                    writer.println("\tget() = ${speed.className}.$unit * this")
                }
            }
        }
    }

    private fun generateMathFunctions() {
        if (speed.number.internalType.signed) {
            writer.println()
            if (speed.number.checkOverflow) writer.println("@Throws(FixedPointException::class)")
            writer.println("fun abs(x: ${speed.className}) = ${speed.className}(abs(x.value))")
        }

        writer.println()
        writer.println("fun min(a: ${speed.className}, b: ${speed.className}) = ${speed.className}(min(a.value, b.value))")
        writer.println()
        writer.println("fun max(a: ${speed.className}, b: ${speed.className}) = ${speed.className}(max(a.value, b.value))")
    }
}
