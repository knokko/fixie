// Generated by fixie at 01-02-2024 23:28
package fixie

import java.math.BigInteger
import java.lang.Math.*

private const val RAW_ONE = 1048576L

@JvmInline
value class FixUncheckedMicro64 private constructor(val raw: Long) : Comparable<FixUncheckedMicro64> {

	override fun toString(): String {
		val intPart = raw / RAW_ONE
		val bigFract = BigInteger.valueOf((raw % RAW_ONE)) * BigInteger.valueOf(1000000)
		val results = bigFract.divideAndRemainder(BigInteger.valueOf(RAW_ONE))
		var fractNumber = results[0]
		if (results[1] >= BigInteger.valueOf(524288)) fractNumber += BigInteger.ONE
		var fractPart = fractNumber.toString().replace("-", "")
		while (fractPart.length < 6) fractPart = "0$fractPart"
		fractPart = ".$fractPart"
		while (fractPart.endsWith('0')) fractPart = fractPart.substring(0 until fractPart.length - 1)
		if (fractPart == ".") fractPart = ""
		val minus = if (raw < 0L && intPart == 0L) "-" else ""
		return "$minus$intPart$fractPart"
	}

	fun toInt() = (raw / RAW_ONE).toInt()

	fun toLong() = raw / RAW_ONE

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	operator fun unaryMinus() = FixUncheckedMicro64(-raw)

	operator fun plus(right: FixUncheckedMicro64) = FixUncheckedMicro64(this.raw + right.raw)

	operator fun plus(right: Int) = this + from(right)

	operator fun plus(right: Long) = this + from(right)

	operator fun plus(right: Float) = this + from(right)

	operator fun plus(right: Double) = this + from(right)

	operator fun minus(right: FixUncheckedMicro64) = FixUncheckedMicro64(this.raw - right.raw)

	operator fun minus(right: Int) = this - from(right)

	operator fun minus(right: Long) = this - from(right)

	operator fun minus(right: Float) = this - from(right)

	operator fun minus(right: Double) = this - from(right)

	operator fun times(right: FixUncheckedMicro64): FixUncheckedMicro64 {
		val highProductBits = multiplyHigh(this.raw, right.raw)
		val lowProductBits = this.raw * right.raw
		return FixUncheckedMicro64((lowProductBits ushr 20) or (highProductBits shl 44))
	}

	operator fun times(right: Int) = FixUncheckedMicro64(raw * right)

	operator fun times(right: Long) = FixUncheckedMicro64(raw * right)

	operator fun times(right: Float) = this * from(right)

	operator fun times(right: Double) = this * from(right)

	operator fun div(right: FixUncheckedMicro64): FixUncheckedMicro64 {
		val highProductBits = this.raw shr 44
		val lowProductBits = this.raw shl 20
		return if ((highProductBits == 0L && this.raw >= 0 && lowProductBits >= 0) || (highProductBits == -1L && this.raw < 0 && lowProductBits < 0)) {
			FixUncheckedMicro64(lowProductBits / right.raw)
		} else {
			val result = (BigInteger.valueOf(this.raw) * BigInteger.valueOf(RAW_ONE)) / BigInteger.valueOf(right.raw)
			FixUncheckedMicro64(result.toLong())
		}
	}

	operator fun div(right: Int) = FixUncheckedMicro64(raw / right)

	operator fun div(right: Long) = FixUncheckedMicro64(raw / right)

	operator fun div(right: Float) = this / from(right)

	operator fun div(right: Double) = this / from(right)

	override operator fun compareTo(other: FixUncheckedMicro64) = this.raw.compareTo(other.raw)

	operator fun compareTo(other: Int) = this.compareTo(from(other))

	operator fun compareTo(other: Long) = if (other < -8796093022208) 1 else if (other > 8796093022207) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Float) = if (other < -8.796093E12f) 1 else if (other > 8.796093E12f) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Double) = if (other < -8.796093022208E12) 1 else if (other > 8.796093022208E12) -1 else this.compareTo(from(other))

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: Long) = FixUncheckedMicro64(rawValue)

		fun from(value: Int) = FixUncheckedMicro64(value.toLong() * RAW_ONE)

		fun from(value: Long) = FixUncheckedMicro64(value * RAW_ONE)

		fun from(value: Float) = from(value.toDouble())

		fun from(value: Double) = FixUncheckedMicro64(round(RAW_ONE.toDouble() * value))
	}

	@JvmInline
	value class Array private constructor(val raw: LongArray) {

		constructor(size: Int) : this(LongArray(size))

		constructor(size: Int, initializer: (Int) -> FixUncheckedMicro64) : this(LongArray(size) { index -> initializer(index).raw })

		val size: Int
			get() = raw.size

		operator fun get(index: Int) = FixUncheckedMicro64(raw[index])

		operator fun set(index: Int, value: FixUncheckedMicro64) {
			raw[index] = value.raw
		}

		fun fill(value: FixUncheckedMicro64) {
			raw.fill(value.raw)
		}
	}
}

operator fun Int.plus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) + right

operator fun Long.plus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) + right

operator fun Float.plus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) + right

operator fun Double.plus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) + right

operator fun Int.minus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) - right

operator fun Long.minus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) - right

operator fun Float.minus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) - right

operator fun Double.minus(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) - right

operator fun Int.times(right: FixUncheckedMicro64) = right * this

operator fun Long.times(right: FixUncheckedMicro64) = right * this

operator fun Float.times(right: FixUncheckedMicro64) = right * this

operator fun Double.times(right: FixUncheckedMicro64) = right * this

operator fun Int.div(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) / right

operator fun Long.div(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) / right

operator fun Float.div(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) / right

operator fun Double.div(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this) / right

operator fun Int.compareTo(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this).compareTo(right)

operator fun Long.compareTo(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this).compareTo(right)

operator fun Float.compareTo(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this).compareTo(right)

operator fun Double.compareTo(right: FixUncheckedMicro64) = FixUncheckedMicro64.from(this).compareTo(right)

fun abs(value: FixUncheckedMicro64) = if (value.raw != Long.MIN_VALUE) FixUncheckedMicro64.raw(kotlin.math.abs(value.raw))
		else throw FixedPointException("Can't represent abs of min value")

fun min(a: FixUncheckedMicro64, b: FixUncheckedMicro64) = FixUncheckedMicro64.raw(kotlin.math.min(a.raw, b.raw))

fun max(a: FixUncheckedMicro64, b: FixUncheckedMicro64) = FixUncheckedMicro64.raw(kotlin.math.max(a.raw, b.raw))
