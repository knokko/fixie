// Generated by fixie at 26-01-2024 22:30
package fixie

import java.lang.Math.*

private const val RAW_ONE = 1000000uL

@JvmInline
value class FixDecMicro64U private constructor(val raw: ULong) : Comparable<FixDecMicro64U> {

	@Throws(FixedPointException::class)
	fun toInt(): Int {
		val uncheckedResult = raw / RAW_ONE
		if (uncheckedResult > Int.MAX_VALUE.toUInt()) throw FixedPointException("$uncheckedResult to too large")
		return uncheckedResult.toInt()
	}

	fun toLong() = (raw / RAW_ONE).toLong()

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	@Throws(FixedPointException::class)
	operator fun plus(right: FixDecMicro64U): FixDecMicro64U {
		try {
			return FixDecMicro64U(addExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this + $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun plus(right: Int) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Long) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Float) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Double) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: FixDecMicro64U): FixDecMicro64U {
		try {
			return FixDecMicro64U(subtractExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this - $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun minus(right: Int) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Long) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Float) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Double) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: FixDecMicro64U): FixDecMicro64U {
		val highProductBits = multiplyHigh(this.raw, right.raw)
		val lowProductBits = this.raw * right.raw
		return if (highProductBits == 0uL) {
			FixDecMicro64U(lowProductBits / RAW_ONE)
		} else {
			val result = (uLongToBigInteger(this.raw) * uLongToBigInteger(right.raw)) / uLongToBigInteger(RAW_ONE)
			try {
				FixDecMicro64U(bigIntegerToULong(result, true))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't compute $this * $right")
			}
		}
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Int) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Long) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Float) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Double) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: FixDecMicro64U): FixDecMicro64U {
		val highProductBits = multiplyHigh(this.raw, RAW_ONE)
		val lowProductBits = this.raw * RAW_ONE
		return if (highProductBits == 0uL) {
			FixDecMicro64U(lowProductBits / right.raw)
		} else {
			val result = (uLongToBigInteger(this.raw) * uLongToBigInteger(RAW_ONE)) / uLongToBigInteger(right.raw)
			try {
				FixDecMicro64U(bigIntegerToULong(result, true))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't compute $this / $right")
			}
		}
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Int) = this / from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: Long) = this / from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: Float) = this / from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: Double) = this / from(right)

	override operator fun compareTo(other: FixDecMicro64U) = this.raw.compareTo(other.raw)

	operator fun compareTo(other: Int) = this.compareTo(from(other))

	operator fun compareTo(other: Long) = this.compareTo(from(other))

	operator fun compareTo(other: Float) = this.compareTo(from(other))

	operator fun compareTo(other: Double) = this.compareTo(from(other))

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: ULong) = FixDecMicro64U(rawValue)

		@Throws(FixedPointException::class)
		fun from(value: Int): FixDecMicro64U {
			try {
				return FixDecMicro64U(multiplyExact(value, RAW_ONE))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't represent $value")
			}
		}

		@Throws(FixedPointException::class)
		fun from(value: Long): FixDecMicro64U {
			try {
				return FixDecMicro64U(multiplyExact(value, RAW_ONE))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't represent $value")
			}
		}

		fun from(value: Float) = from(value.toDouble())

		@Throws(FixedPointException::class)
		fun from(value: Double): FixDecMicro64U {
			val doubleValue = RAW_ONE.toDouble() * value
			if (doubleValue > ULong.MAX_VALUE.toDouble() || doubleValue < ULong.MIN_VALUE.toDouble()) {
				throw FixedPointException("Can't represent $value")
			}
			return FixDecMicro64U(kotlin.math.floor(doubleValue + 0.5).toULong())
		}
	}

	@JvmInline
	@OptIn(ExperimentalUnsignedTypes::class)
	value class Array private constructor(val raw: ULongArray) {

		constructor(size: Int) : this(ULongArray(size))

		constructor(size: Int, initializer: (Int) -> FixDecMicro64U) : this(ULongArray(size) { index -> initializer(index).raw })

		val size: Int
			get() = raw.size

		operator fun get(index: Int) = FixDecMicro64U(raw[index])

		operator fun set(index: Int, value: FixDecMicro64U) {
			raw[index] = value.raw
		}

		fun fill(value: FixDecMicro64U) {
			raw.fill(value.raw)
		}
	}
}

@Throws(FixedPointException::class)
operator fun Int.plus(right: FixDecMicro64U) = FixDecMicro64U.from(this) + right

@Throws(FixedPointException::class)
operator fun Long.plus(right: FixDecMicro64U) = FixDecMicro64U.from(this) + right

@Throws(FixedPointException::class)
operator fun Float.plus(right: FixDecMicro64U) = FixDecMicro64U.from(this) + right

@Throws(FixedPointException::class)
operator fun Double.plus(right: FixDecMicro64U) = FixDecMicro64U.from(this) + right

@Throws(FixedPointException::class)
operator fun Int.minus(right: FixDecMicro64U) = FixDecMicro64U.from(this) - right

@Throws(FixedPointException::class)
operator fun Long.minus(right: FixDecMicro64U) = FixDecMicro64U.from(this) - right

@Throws(FixedPointException::class)
operator fun Float.minus(right: FixDecMicro64U) = FixDecMicro64U.from(this) - right

@Throws(FixedPointException::class)
operator fun Double.minus(right: FixDecMicro64U) = FixDecMicro64U.from(this) - right

@Throws(FixedPointException::class)
operator fun Int.times(right: FixDecMicro64U) = FixDecMicro64U.from(this) * right

@Throws(FixedPointException::class)
operator fun Long.times(right: FixDecMicro64U) = FixDecMicro64U.from(this) * right

@Throws(FixedPointException::class)
operator fun Float.times(right: FixDecMicro64U) = FixDecMicro64U.from(this) * right

@Throws(FixedPointException::class)
operator fun Double.times(right: FixDecMicro64U) = FixDecMicro64U.from(this) * right

@Throws(FixedPointException::class)
operator fun Int.div(right: FixDecMicro64U) = FixDecMicro64U.from(this) / right

@Throws(FixedPointException::class)
operator fun Long.div(right: FixDecMicro64U) = FixDecMicro64U.from(this) / right

@Throws(FixedPointException::class)
operator fun Float.div(right: FixDecMicro64U) = FixDecMicro64U.from(this) / right

@Throws(FixedPointException::class)
operator fun Double.div(right: FixDecMicro64U) = FixDecMicro64U.from(this) / right

operator fun Int.compareTo(right: FixDecMicro64U) = FixDecMicro64U.from(this).compareTo(right)

operator fun Long.compareTo(right: FixDecMicro64U) = FixDecMicro64U.from(this).compareTo(right)

operator fun Float.compareTo(right: FixDecMicro64U) = FixDecMicro64U.from(this).compareTo(right)

operator fun Double.compareTo(right: FixDecMicro64U) = FixDecMicro64U.from(this).compareTo(right)
fun min(a: FixDecMicro64U, b: FixDecMicro64U) = FixDecMicro64U.raw(kotlin.math.min(a.raw, b.raw))
fun max(a: FixDecMicro64U, b: FixDecMicro64U) = FixDecMicro64U.raw(kotlin.math.max(a.raw, b.raw))
