// Generated by fixie at 07-03-2024 07:53
package fixie

import java.text.DecimalFormat
import java.util.Locale
import kotlin.math.*

@JvmInline
value class Angle internal constructor(val value: FixAngle) {

	fun toDouble(unit: AngleUnit) = when(unit) {
		AngleUnit.DEGREES -> 8.38190317349087E-8 * value.raw.toDouble()
		AngleUnit.RADIANS -> 1.4629180796077717E-9 * value.raw.toDouble()
	}

	override fun toString() = toString(AngleUnit.DEGREES, 1)

	fun toString(unit: AngleUnit, maximumFractionDigits: Int): String {
		val format = DecimalFormat.getInstance(Locale.ROOT)
		format.maximumFractionDigits = maximumFractionDigits
		return format.format(toDouble(unit)) + unit.suffix
	}

	operator fun unaryMinus() = Angle(FixAngle.ZERO) - this

	operator fun plus(right: Angle) = Angle(this.value + right.value)

	operator fun minus(right: Angle) = Angle(this.value - right.value)

	companion object {

		fun raw(value: UInt) = Angle(FixAngle.raw(value))

		fun degrees(value: Double) = if (value >= 0.0) raw(round((value % 360.0) * 1.1930464708333334E7).toUInt())
		else raw(round((value % 360.0 + 360.0) * 1.1930464708333334E7).toUInt())

		fun degrees(value: Int) = degrees(value.toDouble())

		fun degrees(value: Float) = degrees(value.toDouble())

		fun degrees(value: FixAngle) = degrees(value.toDouble())

		fun radians(value: Double) = if (value >= 0.0) raw(round((value % 360.0) * 6.835652754172766E8).toUInt())
		else raw(round((value % 360.0 + 360.0) * 6.835652754172766E8).toUInt())

		fun radians(value: Int) = degrees(value.toDouble())

		fun radians(value: Float) = degrees(value.toDouble())

		fun radians(value: FixAngle) = degrees(value.toDouble())
	}
}

val Int.degrees
	get() = Angle.degrees(this)

val Int.radians
	get() = Angle.radians(this)

val Float.degrees
	get() = Angle.degrees(this)

val Float.radians
	get() = Angle.radians(this)

val Double.degrees
	get() = Angle.degrees(this)

val Double.radians
	get() = Angle.radians(this)

val FixAngle.degrees
	get() = Angle.degrees(this)

val FixAngle.radians
	get() = Angle.radians(this)

fun sin(x: Angle) = sin(x.toDouble(AngleUnit.RADIANS))

fun cos(x: Angle) = cos(x.toDouble(AngleUnit.RADIANS))

fun tan(x: Angle) = tan(x.toDouble(AngleUnit.RADIANS))
