// Generated by fixie at 24-01-2024 22:18
package fixie

import java.lang.Math.*

private const val RAW_ONE = 1048576L

@JvmInline
value class FixMicro64 private constructor(val raw: Long) : Comparable<FixMicro64> {

	@Throws(FixedPointException::class)
	fun toInt(): Int {
		val uncheckedResult = raw / RAW_ONE
		if (uncheckedResult < Int.MIN_VALUE) throw FixedPointException("$uncheckedResult to too small")
		if (uncheckedResult > Int.MAX_VALUE) throw FixedPointException("$uncheckedResult to too large")
		return uncheckedResult.toInt()
	}

	fun toLong() = raw / RAW_ONE

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	@Throws(FixedPointException::class)
	operator fun unaryMinus() = if (raw != Long.MIN_VALUE)
		FixMicro64(-raw) else throw FixedPointException("Can't negate MIN_VALUE")

	@Throws(FixedPointException::class)
	operator fun plus(right: FixMicro64): FixMicro64 {
		try {
			return FixMicro64(addExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this + $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun plus(right: Int) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Long) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Float) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Double) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: FixMicro64): FixMicro64 {
		try {
			return FixMicro64(subtractExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this - $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun minus(right: Int) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Long) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Float) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Double) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: FixMicro64): FixMicro64 {
		val highProductBits = multiplyHigh(this.raw, right.raw)
		val lowProductBits = this.raw * right.raw
		if (highProductBits < -(1 shl 19) || highProductBits >= (1 shl 19)) {
			throw FixedPointException("Can't represent $this * $right")
		}
		return FixMicro64((lowProductBits ushr 20) or (highProductBits shl 44))
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Int) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Long) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Float) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Double) = this * from(right)

	override operator fun compareTo(other: FixMicro64) = this.raw.compareTo(other.raw)

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: Long) = FixMicro64(rawValue)

		fun from(value: Int) = FixMicro64(value.toLong() * RAW_ONE)

		@Throws(FixedPointException::class)
		fun from(value: Long): FixMicro64 {
			try {
				return FixMicro64(multiplyExact(value, RAW_ONE))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't represent $value")
			}
		}

		fun from(value: Float) = from(value.toDouble())

		@Throws(FixedPointException::class)
		fun from(value: Double): FixMicro64 {
			val doubleValue = RAW_ONE.toDouble() * value
			if (doubleValue > Long.MAX_VALUE.toDouble() || doubleValue < Long.MIN_VALUE.toDouble()) {
				throw FixedPointException("Can't represent $value")
			}
			return FixMicro64(round(doubleValue))
		}
	}
}

@Throws(FixedPointException::class)
operator fun Int.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Long.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Float.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Double.plus(right: FixMicro64) = FixMicro64.from(this) + right

@Throws(FixedPointException::class)
operator fun Int.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Long.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Float.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Double.minus(right: FixMicro64) = FixMicro64.from(this) - right

@Throws(FixedPointException::class)
operator fun Int.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Long.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Float.times(right: FixMicro64) = FixMicro64.from(this) * right

@Throws(FixedPointException::class)
operator fun Double.times(right: FixMicro64) = FixMicro64.from(this) * right
