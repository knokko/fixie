package fixie.generator

import fixie.DistanceUnit
import java.io.PrintWriter
import java.math.BigInteger
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import kotlin.math.abs

class DisplacementClassGenerator(
    private val writer: PrintWriter,
    private val displacement: DisplacementClass
) {

    private var unitConstants = mutableListOf(displacement.oneUnit)

    fun generate() {
        generateClassPrefix()
        generateToDouble()
        generateToString()
        generateArithmetic()
        generateCompanionObject()
        writer.println("}")
        generateExtensionFunctions()
    }

    private fun generateClassPrefix() {
        val currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"))
        writer.println("// Generated by fixie at $currentTime")
        writer.println("package fixie")
        writer.println()
        writer.println("@JvmInline")
        writer.println("value class ${displacement.className} private constructor(private val value: ${displacement.number.className}) " +
                ": Comparable<${displacement.className}> {")
    }

    private fun generateToDouble() {
        writer.println()
        writer.println("\tfun toDouble(unit: DistanceUnit) = when(unit) {")
        for (unit in DistanceUnit.entries) {
            var factor = unit.divisor.toDouble()
            if (unit.isMetric != displacement.oneUnit.isMetric) {
                if (unit.isMetric) factor *= 1.609344
                else factor /= 1.609344
            }
            factor /= displacement.oneUnit.divisor.toDouble()
            val conversion = if (factor == 1.0) "" else " * $factor"
            writer.println("\t\tDistanceUnit.$unit -> value.toDouble()$conversion")
        }
        writer.println("\t}")
    }

    private fun generateToString() {
        writer.println()
        writer.println("\toverride fun toString() = toString(DistanceUnit.${displacement.displayUnit})")
        writer.println()
        writer.println("\tfun toString(unit: DistanceUnit) = toDouble(unit).toString() + unit.abbreviation")
    }

    private fun generateArithmetic() {
        fun next() {
            writer.println()
            if (displacement.number.checkOverflow) writer.println("\t@Throws(FixedPointException::class)")
        }

        next()
        writer.println("\toverride operator fun compareTo(other: ${displacement.className}) = this.value.compareTo(other.value)")
        next()

        if (displacement.number.internalType.signed) {
            writer.println("\toperator fun unaryMinus() = ${displacement.className}(-value)")
            next()
        }

        writer.println("\toperator fun plus(right: ${displacement.className}) = ${displacement.className}(this.value + right.value)")
        next()
        writer.println("\toperator fun minus(right: ${displacement.className}) = ${displacement.className}(this.value - right.value)")

        for (typeName in arrayOf("Int", "Long", "Float", "Double")) {
            next()
            writer.println("\toperator fun times(right: $typeName) = ${displacement.className}(this.value * right)")
            next()
            writer.println("\toperator fun div(right: $typeName) = ${displacement.className}(this.value / right)")
        }
    }

    private fun generateCompanionObject() {
        writer.println()
        writer.println("\tcompanion object {")
        writer.println()
        writer.println("\t\tfun raw(value: ${displacement.number.internalType}) = ${displacement.className}(${displacement.number.className}.raw(value))")
        writer.println()
        writer.println("\t\tval ${displacement.oneUnit} = ${displacement.className}(${displacement.number.className}.ONE)")

        for (unit in DistanceUnit.entries.reversed()) {
            if (unit != displacement.oneUnit && unit.isMetric == displacement.oneUnit.isMetric) {
                if (unit.divisor > displacement.oneUnit.divisor) {
                    val divisor = unit.divisor / displacement.oneUnit.divisor
                    val rawValue = displacement.number.oneValue / BigInteger.valueOf(divisor)
                    val revertedValue = rawValue * BigInteger.valueOf(divisor)
                    val lostPrecision = (displacement.number.oneValue - revertedValue).toDouble() / displacement.number.oneValue.toDouble()
                    if (abs(lostPrecision) < 0.1) {
                        writer.println()
                        writer.println("\t\tval $unit = ${displacement.oneUnit} / $divisor")
                        unitConstants.add(unit)
                    }
                } else {
                    val factor = displacement.oneUnit.divisor / unit.divisor
                    val rawValue = displacement.number.oneValue * BigInteger.valueOf(factor)
                    if (displacement.number.internalType.canRepresent(rawValue)) {
                        writer.println()
                        writer.println("\t\tval $unit = ${displacement.oneUnit} * $factor")
                        unitConstants.add(unit)
                    }
                }
            }
        }

        writer.println("\t}")
    }

    private fun generateExtensionFunctions() {
        for (typeName in arrayOf("Int", "Long", "Float", "Double")) {
            writer.println()
            if (displacement.number.checkOverflow) writer.println("@Throws(FixedPointException::class)")
            writer.println("operator fun $typeName.times(right: ${displacement.className}) = right * this")

            if (displacement.createNumberExtensions) {
                for (unit in unitConstants) {
                    writer.println()
                    writer.println("val $typeName.${unit.abbreviation}")
                    writer.println("\tget() = ${displacement.className}.$unit * this")
                }
            }
        }
    }
}
