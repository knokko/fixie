// Generated by fixie at 26-01-2024 22:30
package fixie

private const val RAW_ONE: UByte = 30u

@JvmInline
value class FixUncheckedCenti8U private constructor(val raw: UByte) : Comparable<FixUncheckedCenti8U> {

	fun toInt() = (raw / RAW_ONE).toInt()

	fun toLong() = (raw / RAW_ONE).toLong()

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	operator fun plus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U((this.raw + right.raw).toUByte())

	operator fun plus(right: Int) = this + from(right)

	operator fun plus(right: Long) = this + from(right)

	operator fun plus(right: Float) = this + from(right)

	operator fun plus(right: Double) = this + from(right)

	operator fun minus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U((this.raw - right.raw).toUByte())

	operator fun minus(right: Int) = this - from(right)

	operator fun minus(right: Long) = this - from(right)

	operator fun minus(right: Float) = this - from(right)

	operator fun minus(right: Double) = this - from(right)

	operator fun times(right: FixUncheckedCenti8U): FixUncheckedCenti8U {
		val largeValue = this.raw.toUShort() * right.raw.toUShort()
		return FixUncheckedCenti8U((largeValue / RAW_ONE).toUByte())
	}

	operator fun times(right: Int) = this * from(right)

	operator fun times(right: Long) = this * from(right)

	operator fun times(right: Float) = this * from(right)

	operator fun times(right: Double) = this * from(right)

	operator fun div(right: FixUncheckedCenti8U): FixUncheckedCenti8U {
		val largeValue = this.raw.toUShort() * RAW_ONE.toUShort()
		return FixUncheckedCenti8U((largeValue / right.raw).toUByte())
	}

	operator fun div(right: Int) = this / from(right)

	operator fun div(right: Long) = this / from(right)

	operator fun div(right: Float) = this / from(right)

	operator fun div(right: Double) = this / from(right)

	override operator fun compareTo(other: FixUncheckedCenti8U) = this.raw.compareTo(other.raw)

	operator fun compareTo(other: Int) = this.compareTo(from(other))

	operator fun compareTo(other: Long) = this.compareTo(from(other))

	operator fun compareTo(other: Float) = this.compareTo(from(other))

	operator fun compareTo(other: Double) = this.compareTo(from(other))

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: UByte) = FixUncheckedCenti8U(rawValue)

		fun from(value: Byte) = FixUncheckedCenti8U((value.toUByte() * RAW_ONE).toUByte())

		fun from(value: Int) = from(value.toByte())

		fun from(value: Long) = from(value.toByte())

		fun from(value: Float) = from(value.toDouble())

		fun from(value: Double) = FixUncheckedCenti8U(kotlin.math.floor(RAW_ONE.toDouble() * value + 0.5).toUInt().toUByte())
	}

	@JvmInline
	@OptIn(ExperimentalUnsignedTypes::class)
	value class Array private constructor(val raw: UByteArray) {

		constructor(size: Int) : this(UByteArray(size))

		constructor(size: Int, initializer: (Int) -> FixUncheckedCenti8U) : this(UByteArray(size) { index -> initializer(index).raw })

		val size: Int
			get() = raw.size

		operator fun get(index: Int) = FixUncheckedCenti8U(raw[index])

		operator fun set(index: Int, value: FixUncheckedCenti8U) {
			raw[index] = value.raw
		}

		fun fill(value: FixUncheckedCenti8U) {
			raw.fill(value.raw)
		}
	}
}

operator fun Int.plus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) + right

operator fun Long.plus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) + right

operator fun Float.plus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) + right

operator fun Double.plus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) + right

operator fun Int.minus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) - right

operator fun Long.minus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) - right

operator fun Float.minus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) - right

operator fun Double.minus(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) - right

operator fun Int.times(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) * right

operator fun Long.times(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) * right

operator fun Float.times(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) * right

operator fun Double.times(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) * right

operator fun Int.div(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) / right

operator fun Long.div(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) / right

operator fun Float.div(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) / right

operator fun Double.div(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this) / right

operator fun Int.compareTo(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this).compareTo(right)

operator fun Long.compareTo(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this).compareTo(right)

operator fun Float.compareTo(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this).compareTo(right)

operator fun Double.compareTo(right: FixUncheckedCenti8U) = FixUncheckedCenti8U.from(this).compareTo(right)
