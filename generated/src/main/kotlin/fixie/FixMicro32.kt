// Generated by fixie at 28-01-2024 15:03
package fixie

import java.math.BigInteger
import java.lang.Math.*

private const val RAW_ONE = 1048576

@JvmInline
value class FixMicro32 private constructor(val raw: Int) : Comparable<FixMicro32> {

	override fun toString(): String {
		val intPart = raw / RAW_ONE
		val bigFract = BigInteger.valueOf((raw % RAW_ONE).toLong()) * BigInteger.valueOf(1000000)
		val results = bigFract.divideAndRemainder(BigInteger.valueOf(RAW_ONE.toLong()))
		var fractNumber = results[0]
		if (results[1] >= BigInteger.valueOf(524288)) fractNumber += BigInteger.ONE
		var fractPart = "." + fractNumber.toString().replace("-", "")
		while (fractPart.endsWith('0')) fractPart = fractPart.substring(0 until fractPart.length - 1)
		if (fractPart == ".") fractPart = ""
		val minus = if (raw < 0 && intPart == 0) "-" else ""
		return "$minus$intPart$fractPart"
	}

	fun toInt() = raw / RAW_ONE

	fun toLong() = (raw / RAW_ONE).toLong()

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	@Throws(FixedPointException::class)
	operator fun unaryMinus() = if (raw != Int.MIN_VALUE)
		FixMicro32(-raw) else throw FixedPointException("Can't negate MIN_VALUE")

	@Throws(FixedPointException::class)
	operator fun plus(right: FixMicro32): FixMicro32 {
		try {
			return FixMicro32(addExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this + $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun plus(right: Int) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Long) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Float) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun plus(right: Double) = this + from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: FixMicro32): FixMicro32 {
		try {
			return FixMicro32(subtractExact(this.raw, right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Tried to compute $this - $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun minus(right: Int) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Long) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Float) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun minus(right: Double) = this - from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: FixMicro32): FixMicro32 {
		val largeValue = this.raw.toLong() * right.raw.toLong()
		try {
			return FixMicro32(toIntExact(largeValue shr 20))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Can't represent $this * $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Int): FixMicro32 {
		try {
			return FixMicro32(multiplyExact(raw, right))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Can't represent $this * $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Long): FixMicro32 {
		try {
			return FixMicro32(toIntExact(multiplyExact(raw.toLong(), right)))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Can't represent $this * $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun times(right: Float) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun times(right: Double) = this * from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: FixMicro32): FixMicro32 {
		val largeValue = this.raw.toLong() shl 20
		try {
			return FixMicro32(toIntExact(largeValue / right.raw))
		} catch (overflow: ArithmeticException) {
			throw FixedPointException("Can't represent $this / $right")
		}
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Int): FixMicro32 {
		if (right == 0 || (raw == Int.MIN_VALUE && right == -1)) {
			throw FixedPointException("Can't represent $this / $right")
		}
		return FixMicro32(raw / right)
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Long): FixMicro32 {
		if (right == 0L || (raw == Int.MIN_VALUE && right == -1L)) {
			throw FixedPointException("Can't represent $this / $right")
		}
		return FixMicro32(toIntExact(raw.toLong() / right))
	}

	@Throws(FixedPointException::class)
	operator fun div(right: Float) = this / from(right)

	@Throws(FixedPointException::class)
	operator fun div(right: Double) = this / from(right)

	override operator fun compareTo(other: FixMicro32) = this.raw.compareTo(other.raw)

	operator fun compareTo(other: Int) = if (other < -2048) 1 else if (other > 2047) -1 else this.compareTo(from(other))

	operator fun compareTo(other: Long) = if (other < -2048) 1 else if (other > 2047) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Float) = if (other < -2048.0f) 1 else if (other > 2048.0f) -1 else this.compareTo(from(other))
	operator fun compareTo(other: Double) = if (other < -2048.0) 1 else if (other > 2047.9999990463257) -1 else this.compareTo(from(other))

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: Int) = FixMicro32(rawValue)

		@Throws(FixedPointException::class)
		fun from(value: Int): FixMicro32 {
			try {
				return FixMicro32(multiplyExact(value, RAW_ONE))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't represent $value")
			}
		}

		@Throws(FixedPointException::class)
		fun from(value: Long): FixMicro32 {
			try {
				return from(toIntExact(value))
			} catch (overflow: ArithmeticException) {
				throw FixedPointException("Can't represent $value")
			}
		}

		fun from(value: Float) = from(value.toDouble())

		@Throws(FixedPointException::class)
		fun from(value: Double): FixMicro32 {
			val doubleValue = RAW_ONE.toDouble() * value
			if (doubleValue > Int.MAX_VALUE.toDouble() || doubleValue < Int.MIN_VALUE.toDouble()) {
				throw FixedPointException("Can't represent $value")
			}
			return FixMicro32(round(doubleValue).toInt())
		}
	}

	@JvmInline
	value class Array private constructor(val raw: IntArray) {

		constructor(size: Int) : this(IntArray(size))

		constructor(size: Int, initializer: (Int) -> FixMicro32) : this(IntArray(size) { index -> initializer(index).raw })

		val size: Int
			get() = raw.size

		operator fun get(index: Int) = FixMicro32(raw[index])

		operator fun set(index: Int, value: FixMicro32) {
			raw[index] = value.raw
		}

		fun fill(value: FixMicro32) {
			raw.fill(value.raw)
		}
	}
}

@Throws(FixedPointException::class)
operator fun Int.plus(right: FixMicro32) = FixMicro32.from(this) + right

@Throws(FixedPointException::class)
operator fun Long.plus(right: FixMicro32) = FixMicro32.from(this) + right

@Throws(FixedPointException::class)
operator fun Float.plus(right: FixMicro32) = FixMicro32.from(this) + right

@Throws(FixedPointException::class)
operator fun Double.plus(right: FixMicro32) = FixMicro32.from(this) + right

@Throws(FixedPointException::class)
operator fun Int.minus(right: FixMicro32) = FixMicro32.from(this) - right

@Throws(FixedPointException::class)
operator fun Long.minus(right: FixMicro32) = FixMicro32.from(this) - right

@Throws(FixedPointException::class)
operator fun Float.minus(right: FixMicro32) = FixMicro32.from(this) - right

@Throws(FixedPointException::class)
operator fun Double.minus(right: FixMicro32) = FixMicro32.from(this) - right

@Throws(FixedPointException::class)
operator fun Int.times(right: FixMicro32) = FixMicro32.from(this) * right

@Throws(FixedPointException::class)
operator fun Long.times(right: FixMicro32) = FixMicro32.from(this) * right

@Throws(FixedPointException::class)
operator fun Float.times(right: FixMicro32) = FixMicro32.from(this) * right

@Throws(FixedPointException::class)
operator fun Double.times(right: FixMicro32) = FixMicro32.from(this) * right

@Throws(FixedPointException::class)
operator fun Int.div(right: FixMicro32) = FixMicro32.from(this) / right

@Throws(FixedPointException::class)
operator fun Long.div(right: FixMicro32) = FixMicro32.from(this) / right

@Throws(FixedPointException::class)
operator fun Float.div(right: FixMicro32) = FixMicro32.from(this) / right

@Throws(FixedPointException::class)
operator fun Double.div(right: FixMicro32) = FixMicro32.from(this) / right

operator fun Int.compareTo(right: FixMicro32) = FixMicro32.from(this).compareTo(right)

operator fun Long.compareTo(right: FixMicro32) = FixMicro32.from(this).compareTo(right)

operator fun Float.compareTo(right: FixMicro32) = FixMicro32.from(this).compareTo(right)

operator fun Double.compareTo(right: FixMicro32) = FixMicro32.from(this).compareTo(right)

fun abs(value: FixMicro32) = FixMicro32.raw(kotlin.math.abs(value.raw))

fun min(a: FixMicro32, b: FixMicro32) = FixMicro32.raw(kotlin.math.min(a.raw, b.raw))

fun max(a: FixMicro32, b: FixMicro32) = FixMicro32.raw(kotlin.math.max(a.raw, b.raw))
