package fixie.generator.spin

import fixie.generator.number.FloatType
import java.io.PrintWriter
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

class SpinClassGenerator(
        private val writer: PrintWriter,
        private val spin: SpinClass,
        private val packageName: String
) {

    fun generate() {
        generateClassPrefix()
        generateToDouble()
        generateToString()
        generateArithmetic()
        generateCompanionObject()
        writer.println("}")
        generateExtensionFunctions()
        generateMathFunctions()
    }

    private fun generateClassPrefix() {
        val currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"))
        writer.println("// Generated by fixie at $currentTime")
        writer.println("package $packageName")
        writer.println()
        for (functionName in arrayOf("abs", "max", "min")) writer.println("import kotlin.math.$functionName")
        if (spin.angleClassName != null) {
            writer.println("import kotlin.time.Duration")
            writer.println("import kotlin.time.DurationUnit")
        }
        writer.println()
        writer.println("@JvmInline")
        writer.println("value class ${spin.className} internal constructor(val value: ${spin.floatType.typeName}) " +
                ": Comparable<${spin.className}> {")
    }

    private fun generateToDouble() {
        writer.println()
        writer.println("\tfun toDouble(unit: SpinUnit) = when(unit) {")
        for (unit in SpinUnit.entries) {
            val factor = unit.angleMax / spin.oneUnit.angleMax
            val conversion = if (factor == 1.0) "" else " * $factor"
            val toDouble = if (spin.floatType == FloatType.DoublePrecision) "" else ".toDouble()"
            writer.println("\t\tSpinUnit.$unit -> value$toDouble$conversion")
        }
        writer.println("\t}")
    }

    private fun generateToString() {
        writer.println()
        writer.println("\toverride fun toString() = toString(SpinUnit.${spin.displayUnit})")
        writer.println()
        writer.println("\tfun toString(unit: SpinUnit): String {")
        writer.println("\t\tval format = if (unit == SpinUnit.DEGREES_PER_SECOND) \"%.0f\" else \"%.2f\"")
        writer.println("\t\treturn String.format(\"\$format%s\", toDouble(unit), unit.suffix)")
        writer.println("\t}")
    }

    private fun generateArithmetic() {
        writer.println()
        writer.println("\toverride operator fun compareTo(other: ${spin.className}) = this.value.compareTo(other.value)")

        writer.println()
        writer.println("\toperator fun unaryMinus() = ${spin.className}(-value)")

        writer.println()
        writer.println("\toperator fun plus(right: ${spin.className}) = ${spin.className}(this.value + right.value)")

        writer.println()
        writer.println("\toperator fun minus(right: ${spin.className}) = ${spin.className}(this.value - right.value)")

        for (typeName in arrayOf("Int", "Long", "Float", "Double")) {
            val rightSuffix = if (typeName == "Double" && spin.floatType == FloatType.SinglePrecision) ".toFloat()" else ""

            writer.println()
            writer.println("\toperator fun times(right: $typeName) = ${spin.className}(this.value * right$rightSuffix)")

            writer.println()
            writer.println("\toperator fun div(right: $typeName) = ${spin.className}(this.value / right$rightSuffix)")
        }

        if (spin.angleClassName != null) {
            val functionName = if (spin.oneUnit == SpinUnit.DEGREES_PER_SECOND) "degrees" else "radians"
            writer.println()
            writer.println("\toperator fun times(right: Duration) = ${spin.angleClassName}.$functionName(value * right.toDouble(DurationUnit.SECONDS))")
        }

        // TODO Angular acceleration?
//        if (speed.acceleration != null) {
//            writer.println()
//            writer.println("\toperator fun div(right: Duration) = toDouble(SpeedUnit.METERS_PER_SECOND) * ${speed.acceleration.className}.MPS2 / right.toDouble(DurationUnit.SECONDS)")
//        }

        writer.println()
        writer.println("\toperator fun div(right: ${spin.className}) = this.value / right.value")
    }

    private fun generateCompanionObject() {
        writer.println()
        writer.println("\tcompanion object {")
        writer.println()
        writer.println("\t\tfun raw(value: ${spin.floatType.typeName}) = ${spin.className}(value)")
        writer.println()
        val oneValue = if (spin.floatType == FloatType.SinglePrecision) "1f" else "1.0"
        writer.println("\t\tval ${spin.oneUnit} = ${spin.className}($oneValue)")

        for (unit in SpinUnit.entries) {
            if (unit != spin.oneUnit) {
                val factor = spin.oneUnit.angleMax / unit.angleMax
                writer.println()
                writer.println("\t\tval $unit = ${spin.oneUnit} * $factor")
            }
        }

        writer.println("\t}")
    }

    private fun generateExtensionFunctions() {
        for (typeName in arrayOf("Int", "Long", "Float", "Double")) {
            writer.println()
            writer.println("operator fun $typeName.times(right: ${spin.className}) = right * this")

            if (spin.createNumberExtensions) {
                for (unit in SpinUnit.entries) {
                    writer.println()
                    writer.println("val $typeName.${unit.abbreviation.replace('/', 'p')}")
                    writer.println("\tget() = ${spin.className}.$unit * this")
                }
            }
        }
        if (spin.angleClassName != null) {
            writer.println()
            writer.println("operator fun Duration.times(right: ${spin.className}) = right * this")
        }
    }

    private fun generateMathFunctions() {
        writer.println()
        writer.println("fun abs(x: ${spin.className}) = ${spin.className}(abs(x.value))")

        writer.println()
        writer.println("fun min(a: ${spin.className}, b: ${spin.className}) = ${spin.className}(min(a.value, b.value))")
        writer.println()
        writer.println("fun max(a: ${spin.className}, b: ${spin.className}) = ${spin.className}(max(a.value, b.value))")
    }
}
