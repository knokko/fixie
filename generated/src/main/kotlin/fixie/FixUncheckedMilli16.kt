// Generated by fixie at 26-01-2024 14:35
package fixie

import java.lang.Math.*

private const val RAW_ONE: Short = 1000

@JvmInline
value class FixUncheckedMilli16 private constructor(val raw: Short) : Comparable<FixUncheckedMilli16> {

	fun toInt() = raw / RAW_ONE

	fun toLong() = (raw / RAW_ONE).toLong()

	fun toFloat() = toDouble().toFloat()

	fun toDouble() = raw.toDouble() / RAW_ONE.toDouble()

	operator fun unaryMinus() = FixUncheckedMilli16((-raw).toShort())

	operator fun plus(right: FixUncheckedMilli16) = FixUncheckedMilli16((this.raw + right.raw).toShort())

	operator fun plus(right: Int) = this + from(right)

	operator fun plus(right: Long) = this + from(right)

	operator fun plus(right: Float) = this + from(right)

	operator fun plus(right: Double) = this + from(right)

	operator fun minus(right: FixUncheckedMilli16) = FixUncheckedMilli16((this.raw - right.raw).toShort())

	operator fun minus(right: Int) = this - from(right)

	operator fun minus(right: Long) = this - from(right)

	operator fun minus(right: Float) = this - from(right)

	operator fun minus(right: Double) = this - from(right)

	operator fun times(right: FixUncheckedMilli16): FixUncheckedMilli16 {
		val largeValue = this.raw.toInt() * right.raw.toInt()
		return FixUncheckedMilli16((largeValue / RAW_ONE).toShort())
	}

	operator fun times(right: Int) = this * from(right)

	operator fun times(right: Long) = this * from(right)

	operator fun times(right: Float) = this * from(right)

	operator fun times(right: Double) = this * from(right)

	override operator fun compareTo(other: FixUncheckedMilli16) = this.raw.compareTo(other.raw)

	companion object {

		val ZERO = from(0)
		val ONE = from(1)

		fun raw(rawValue: Short) = FixUncheckedMilli16(rawValue)

		fun from(value: Short) = FixUncheckedMilli16((value * RAW_ONE).toShort())

		fun from(value: Int) = from(value.toShort())

		fun from(value: Long) = from(value.toShort())

		fun from(value: Float) = from(value.toDouble())

		fun from(value: Double) = FixUncheckedMilli16(round(RAW_ONE.toDouble() * value).toShort())
	}

	@JvmInline
	value class Array private constructor(val raw: ShortArray) {

		constructor(size: Int) : this(ShortArray(size))

		operator fun get(index: Int) = FixUncheckedMilli16(raw[index])

		operator fun set(index: Int, value: FixUncheckedMilli16) {
			raw[index] = value.raw
		}

		fun fill(value: FixUncheckedMilli16) {
			raw.fill(value.raw)
		}
	}
}

operator fun Int.plus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) + right

operator fun Long.plus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) + right

operator fun Float.plus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) + right

operator fun Double.plus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) + right

operator fun Int.minus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) - right

operator fun Long.minus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) - right

operator fun Float.minus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) - right

operator fun Double.minus(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) - right

operator fun Int.times(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) * right

operator fun Long.times(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) * right

operator fun Float.times(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) * right

operator fun Double.times(right: FixUncheckedMilli16) = FixUncheckedMilli16.from(this) * right
